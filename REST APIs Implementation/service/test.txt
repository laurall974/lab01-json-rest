function convertImage(pathOriginFile, pathTargetFile, originType, targetType) {

    return new Promise((resolve, reject) => {
    
        // Open the gRPC call with the gRPC server
        let call = client.fileConvert();


        // Set callback to receive back the file
        var wstream = fs.createWriteStream(pathTargetFile); //for now, the name is predefined
        var success = false;
        var error = "";
        call.on('data', function(data){

            //receive meta data
            if(data.meta != undefined){
                success = data.meta.success;
                
                if(success == false){
                    error = data.meta.error;
                    reject(error);
                }
            }

            //receive file chunck
            if(data.file != undefined){
                wstream.write(data.file);
            }

        });

        // Set callback to end the communication and close the write stream 
        call.on('end',function(){
            wstream.end();
        })
                    
        // Send the conversion types for the file (when the gRPC client is integrated with the server of Lab01, the file_type_origin and file_type_target will be chosen by the user)
        call.write({ "meta": {"file_type_origin": originType, "file_type_target": targetType}});

        // Send the file
        const max_chunk_size = 1024; //1KB
        const imageDataStream = fs.createReadStream(pathOriginFile, {highWaterMark: max_chunk_size});
       
        imageDataStream.on('data', (chunk) => {
            call.write({"file": chunk });
        });

        // When all the chunks of the image have been sent, the clients stops to use the gRPC call from the sender side
        imageDataStream.on('end', () => {
            call.end();
        });

        // Only after the write stream is closed,the promise is resolved (otherwise race conditions might happen)
        wstream.on('close',function(){
            resolve();
        })
    });

}